// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Responder is an autogenerated mock type for the Responder type
type Responder struct {
	mock.Mock
}

// Body provides a mock function with given fields:
func (_m *Responder) Body() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Headers provides a mock function with given fields:
func (_m *Responder) Headers() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// SetBody provides a mock function with given fields: body
func (_m *Responder) SetBody(body string) {
	_m.Called(body)
}

// SetHeaders provides a mock function with given fields: headers
func (_m *Responder) SetHeaders(headers map[string]string) {
	_m.Called(headers)
}

// SetStatusCode provides a mock function with given fields: code
func (_m *Responder) SetStatusCode(code int) {
	_m.Called(code)
}

// StatusCode provides a mock function with given fields:
func (_m *Responder) StatusCode() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type NewResponderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewResponder creates a new instance of Responder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResponder(t NewResponderT) *Responder {
	mock := &Responder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
